<?php

/**
 * @file
 * Main module file.
 */

declare(strict_types = 1);

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\ContentEntityInterface;

/**
 * Implements hook_help().
 */
function views_field_formatter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.views_field_formatter':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("Provide a new field formatter: '<strong>View</strong>' for each field types and allows you to select a View and to use its result instead of the original field value.") . '</p>';
      $output .= '<h3>' . t('More Information') . '</h3>';
      $output .= '<p>' . t('for more information about this module please visit the <a href="@link">project page</a>', ['@link' => 'https://www.drupal.org/project/views_field_formatter']) . '</p>';

      return $output;

    default:
      return '';
  }
}

/**
 * Implements hook_token_info_alter().
 */
function views_field_formatter_token_info_alter(array &$info) {
  $type_info = \Drupal::service('plugin.manager.field.field_type')
    ->getDefinitions();

  // Attach field tokens to their respecitve entity tokens.
  foreach (\Drupal::entityTypeManager()->getDefinitions() as $entity_type_id => $entity_type) {
    if (!$entity_type->isSubclassOf(
      '\Drupal\Core\Entity\ContentEntityInterface'
    )) {
      continue;
    }

    // Make sure a token type exists for this entity.
    $token_type = \Drupal::service('token.entity_mapper')
      ->getTokenTypeForEntityType($entity_type_id);
    if (empty($token_type) || !isset($info['types'][$token_type])) {
      continue;
    }

    $fields = \Drupal::service('entity_field.manager')
      ->getFieldStorageDefinitions($entity_type_id);
    foreach ($fields as $field_name => $field) {
      /** @var \Drupal\field\FieldStorageConfigInterface $field */

      // Ensure the token implements FieldStorageConfigInterface or is defined
      // in token module.
      $provider = '';
      if (isset($info['types'][$token_type]['module'])) {
        $provider = $info['types'][$token_type]['module'];
      }
      if (!($field instanceof FieldStorageConfigInterface) && 'token' !== $provider) {
        continue;
      }

      if ('comment' === $token_type && 'comment_body' === $field_name) {
        // Core provides the comment field as [comment:body].
        continue;
      }

      // Do not define the token type if the field has no properties.
      if (!$field->getPropertyDefinitions()) {
        continue;
      }

      // Generate a description for the token.
      $labels = _token_field_label($entity_type_id, $field_name);
      $label = \array_shift($labels);
      $params['@type'] = $type_info[$field->getType()]['label'];

      $cardinality = $field->getCardinality();
      $cardinality = (FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED === $cardinality || $cardinality > 3) ? 3 : $cardinality;
      $field_token_name = $token_type . '-' . $field_name;

      // Show a different token for each field delta.
      if ($cardinality > 1) {
        $info['tokens']["list<$field_token_name>"]['delta'] = [
          'name' => t(
            '@type type current delta',
            ['@type' => Html::escape($label)]
          ),
          'module' => 'token',
          'type' => $field_token_name,
        ];
        $info['tokens']["list<$field_token_name>"]['current'] = [
          'name' => t(
            '@type type with current delta',
            ['@type' => Html::escape($label)]
          ),
          'module' => 'token',
          'type' => $field_token_name,
        ];
        $info['tokens']["list<$field_token_name>"]['concat:,'] = [
          'name' => t(
            '@type type concatenated values',
            ['@type' => Html::escape($label)]
          ),
          'module' => 'token',
          'type' => $field_token_name,
        ];
      }
    }
  }
}

/**
 * Implements hook_tokens().
 */
function views_field_formatter_tokens($type, $tokens, array $data = [], array $options = []) {
  $replacements = [];

  if (!isset($data['views_field_formatter'])) {
    return [];
  }

  /* @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $data['entity'];
  if (!($entity instanceof ContentEntityInterface)) {
    return $replacements;
  }

  foreach ($tokens as $name => $original) {
    list($field_name, $delta) = \explode(':', $name, 2);

    // Do not continue if the field is empty.
    if ($data['views_field_formatter']['items']->isEmpty()) {
      continue;
    }

    // Handle [entity:field_name:delta].
    if ('delta' === $delta) {
      $replacements[$original] = $data['views_field_formatter']['delta'];
    }

    // Handle [entity:field_name:current].
    if ('current' === $delta) {
      if ($field_delta = $data['views_field_formatter']['items'][$data['views_field_formatter']['delta']]) {
        $field_output = $field_delta->view();
        $replacements[$original] = \Drupal::service('renderer')->renderPlain($field_output);
      }
    }

    // Handle [entity:field_name:concat:*].
    if (0 === \strpos($delta, 'concat:')) {
      list($third_part, $fourth_part) = \explode(':', $delta, 2);

      if ('concat' === $third_part && NULL !== $fourth_part) {
        $field_pieces = [];
        foreach ($data['views_field_formatter']['items'] as $item) {
          $item = $item->view();
          $field_pieces[] = \Drupal::service('renderer')->renderPlain($item);
        }
        $replacements[$original] = \implode($fourth_part, $field_pieces);
      }
    }
  }

  return $replacements;
}
